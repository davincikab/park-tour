{"version":3,"sources":["assets/sunrise.jpg","assets sync /^/.*$","assets/points.geojson","Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","Button","props","className","text","myIcon","L","ListMarkers","data","feature","Marker","position","geometry","coordinates","reverse","icon","key","properties","Popup","src","require","img","App","useState","isMapVisible","setMapVisible","isDescriptionVisible","lat","lng","center","zoom","setData","useEffect","pts","features","onClick","Map","TileLayer","attribution","url","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5cc6cc81.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sunrise.339b931b.jpg\";","var map = {\n\t\"./points.geojson\": 27,\n\t\"./pts\": 8,\n\t\"./pts.json\": 8,\n\t\"./sunrise.jpg\": 15\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 26;","module.exports = __webpack_public_path__ + \"static/media/points.cf1e5a06.geojson\";","import React from 'react';\r\n\r\nfunction Button (props) {\r\n    \r\n    return (\r\n        <button\r\n            className={\"btn \" + props.className}\r\n        >\r\n            {props.text}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { useState, useEffect } from 'react';\nimport { Map, TileLayer,  Marker, Popup} from 'react-leaflet';\nimport Button from './Button/Button';\nimport './App.css';\nimport * as L from 'leaflet';\nimport sunrise from './assets/sunrise.jpg'\nimport pts from './assets/pts.json';\n\n\nconst myIcon = L.divIcon({className: 'custom-icon'});\nfunction App() {\n  const [isMapVisible, setMapVisible] = useState(true);\n  const [isDescriptionVisible, setDesscriptionVisible ] = useState(false);\n  const [center, setCenter ] = useState({lat:-1.234, lng:36.987});\n  const [zoom, setZoom ] = useState(12);\n  const [data, setData] = useState([]);\n  const [description, setDescription] = useState({});\n\n  useEffect(() => {\n    setData(pts.features);\n  }, []);\n\n  // toggle map\n  const updateMapState = () => {\n    setMapVisible(!isMapVisible);\n  }\n\n  // toggle description\n  const toggleDescription = (e) => {\n    setDesscriptionVisible(!isDescriptionVisible);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"\">\n        { !isMapVisible &&\n           <div className=\"app-name\" onClick={updateMapState}>\n            Park Tour\n          </div>\n        }\n\n        { isMapVisible &&\n          <>\n           <Map\n            center={center}\n            zoom={zoom}\n            className=\"map-container\"\n           >\n              <TileLayer \n                attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n                url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n              />\n\n                {\n                  data &&\n                  <ListMarkers data={data} />\n                }\n           </Map>\n           <div className=\"filter-section\">\n              <h6 className=\"filter-title\">Filters</h6>\n              <div className=\"btn-group\">\n                <Button className=\"btn-primary\" text=\"Primary\" />\n                <Button className=\"btn-secondary\" text=\"Seconday\" />\n                <Button className=\"btn-tertiary\" text=\"Update\" />\n              </div>\n           </div>\n\n           {/* Point description sections */}\n\n           <div className={isDescriptionVisible ? \"description-tab\" : \"description-tab d-none\"}>\n            <div className=\"section-intro\">\n                  {/* Controls */}\n                  <Button className=\"\" text=\"&minus;\"/>\n                  <Button className=\"\" text=\"&#43;\"/>\n                  <Button className=\"\" text=\"&times;\"/>\n            </div>\n            <div className=\"section\">\n                <h5 className=\"section-title\">Home coming</h5>\n            </div>\n            <div className=\"section\">\n            </div>\n           </div>\n           </>\n        }\n      </header>\n    </div>\n  );\n}\n\n// list markes\nconst ListMarkers = (props) => {\n  const data = props.data;\n\n  // mouse over event\n    const onMouseOver = (e) => {\n      console.log(e);\n      e.target.openPopup();\n    }\n\n    const onMouseOut = (e) => {\n      e.target.closePopup();\n    }\n    return (\n        data.map(feature => \n        <Marker\n                position={feature.geometry.coordinates.reverse()}\n                icon={myIcon}\n                key={feature.properties.id}\n            >\n                <Popup\n                  key={feature.properties.id}\n                >\n                  <div className=\"popup-content\">\n                    <img src={require(\"./assets/\" + feature.properties.img)} />\n                    <div className=\"custom-icon marker-popup\"></div>\n                    <button className=\"bnt\">&#8594;</button>\n                  </div>\n                </Popup>\n              </Marker>\n      )\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}