{"version":3,"sources":["assets sync /^/.*$","assets/points.geojson","assets/sunrise.jpg","assets/sunriset.jpg","Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Button","props","className","onClick","text","myIcon","L","ListMarkers","data","onMouseOver","target","openPopup","onMouseOut","console","log","feature","Marker","position","geometry","coordinates","reverse","icon","key","properties","Popup","src","require","img","toggleDescription","App","useState","isMapVisible","setMapVisible","isDescriptionVisible","setDescriptionVisible","lat","lng","center","setCenter","zoom","setData","description","setDescription","mapRef","useRef","useEffect","pts","features","value","updateDescription","currCenter","Map","ref","TileLayer","attribution","url","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0a33ec27.chunk.js","sourcesContent":["var map = {\n\t\"./points.geojson\": 29,\n\t\"./pts\": 9,\n\t\"./pts.json\": 9,\n\t\"./sunrise.jpg\": 30,\n\t\"./sunriset.jpg\": 31\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 17;","module.exports = __webpack_public_path__ + \"static/media/points.cf1e5a06.geojson\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.fc53033e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sunriset.339b931b.jpg\";","import React from 'react';\r\n\r\nfunction Button (props) {\r\n    \r\n    return (\r\n        <button\r\n            className={\"btn \" + props.className}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.text}\r\n        </button>\r\n    );\r\n}\r\n\r\nexport default Button;","import React, { useState, useEffect, useRef } from 'react';\nimport { Map, TileLayer,  Marker, Popup} from 'react-leaflet';\nimport Button from './Button/Button';\nimport './App.css';\nimport * as L from 'leaflet';\nimport pts from './assets/pts.json';\n\n\nconst myIcon = L.divIcon({className: 'custom-icon'});\nfunction App() {\n  const [isMapVisible, setMapVisible] = useState(true);\n  const [isDescriptionVisible, setDescriptionVisible ] = useState(false);\n  const [center, setCenter ] = useState({lat:-1.234, lng:36.987});\n  const [zoom, setZoom ] = useState(12);\n  const [data, setData] = useState([]);\n  const [description, setDescription] = useState({});\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    setData(pts.features);\n  }, []);\n\n  // toggle map\n  const updateMapState = () => {\n    setMapVisible(!isMapVisible);\n  }\n\n\n  // toggle description\n  const toggleDescription = (value, feature) => {\n    setDescriptionVisible(value);\n    updateDescription(feature);\n\n    let currCenter = [];\n    if(feature.properties) {\n      console.log(feature);\n      currCenter = feature.geometry.coordinates;\n\n      console.log(currCenter);\n      setCenter({lat:currCenter[1], lng:currCenter[0]});\n      console.log(mapRef);\n    }\n  }\n\n  // update the point description\n  const updateDescription = (description) => {\n    setDescription(description);\n  }\n\n\n  console.log(center);\n  return (\n    <div className=\"App\">\n      <header className=\"\">\n        { !isMapVisible &&\n           <div className=\"app-name\" onClick={updateMapState}>\n            Park Tour\n          </div>\n        }\n\n        { isMapVisible &&\n          <>\n           <Map\n            center={center}\n            zoom={zoom}\n            className=\"map-container\"\n            ref={mapRef}\n           >\n              <TileLayer \n                attribution='&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a>, &copy; <a href=\"https://carto.com/attributions\">CARTO</a>'\n                url=\"https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png\"\n              />\n\n                {\n                  data &&\n                  <ListMarkers data={data} toggleDescription={toggleDescription} updateDescription={updateDescription}/>\n                }\n           </Map>\n           <div className=\"filter-section\">\n              <h6 className=\"filter-title\">Filters</h6>\n              <div className=\"btn-group\">\n                <Button className=\"btn-primary\" text=\"Primary\" onClick={() => console.log(\"Click\")} />\n                <Button className=\"btn-secondary\" text=\"Seconday\" onClick={ () => console.log(\"Click\")} />\n                <Button className=\"btn-tertiary\" text=\"Update\" onClick={e => toggleDescription(false, {})}/>\n              </div>\n           </div>\n\n           {/* Point description sections */}\n            \n            {\n              description.properties && \n              <div className={isDescriptionVisible ? \"description-tab\" : \"description-tab d-none\"}>\n                <div className=\"section-intro\">\n                      {/* Controls */}\n                      <Button className=\"\" text=\"&minus;\" onClick={() => console.log(\"Click\")}/>\n                      <Button className=\"\" text=\"&#43;\" onClick={() => console.log(\"Click\")}/>\n                      <Button className=\"\" text=\"&times;\"  onClick={e => toggleDescription(false, {})}/>\n                </div>\n                <div className=\"section\">\n                    <h5 className=\"section-title\">\n                      <div className=\"custom-icon mr-2\">{description.properties.id}</div>\n                      {description.properties.name}\n                    </h5>\n                </div>\n                <div className=\"section\">\n                  <div className=\"section-text\">\n                    <p className=\"text\">\n                      {description.properties.description}\n                    </p>\n                  </div>\n                  <div className=\"section-media\">\n                     <img className=\"img\" src={require(\"./assets/\" + description.properties.img)}/>\n                  </div>\n                </div>\n              </div>\n            }\n           </>\n        }\n      </header>\n    </div>\n  );\n}\n\n// list markes\nconst ListMarkers = (props) => {\n  const data = props.data;\n\n  // mouse over event\n    const onMouseOver = (e) => {\n      e.target.openPopup();\n    }\n\n    const onMouseOut = (e) => {\n      // e.target.closePopup();\n      console.log(e);\n    }\n\n    return (\n        data.map(feature => \n        <Marker\n                position={[...feature.geometry.coordinates].reverse()}\n                icon={myIcon}\n                key={feature.properties.id}\n                onMouseOver={onMouseOver}\n                // onClick={e => props.updateDescription(feature)}\n            >\n                <Popup\n                  key={feature.properties.id}\n                  onMouseOut={onMouseOut}\n                >\n                  <div className=\"popup-content\">\n                    <img src={require(\"./assets/\" + feature.properties.img)} />\n                    <div className=\"custom-icon marker-popup\"></div>\n                    <button className=\"btn\" onClick={e => props.toggleDescription(true, feature)}>&#8594;</button>\n                  </div>\n                </Popup>\n              </Marker>\n      )\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}